#pragma once
/**
C4Version.h 
=============

This header was generated by CMake from C4Version.h.in

NB for checking the CMake versioning machinery see 

* ~/opticks/examples/UseCustom4/go.sh 

**/

#define Custom4_VERSION_MAJOR @Custom4_VERSION_MAJOR@
#define Custom4_VERSION_MINOR @Custom4_VERSION_MINOR@
#define Custom4_VERSION_PATCH @Custom4_VERSION_PATCH@
#define Custom4_VERSION @Custom4_VERSION@

#define Custom4_VERSION_NUMBER @Custom4_VERSION_NUMBER@

// xstr converts preprocessor macro into a string 
#define C4Version_xstr(s) C4Version_str(s)
#define C4Version_str(s) #s

#include <string>
#include <sstream>
#include <cstdlib>
#include <cassert>

struct C4Version 
{
    static std::string Version()
    {
        return C4Version_xstr(Custom4_VERSION); 
    }
    static std::string Number()
    {
        return C4Version_xstr(Custom4_VERSION_NUMBER); 
    }

    static int Int()
    {
        const char* s_version = C4Version_xstr(Custom4_VERSION_NUMBER); 
        return atoi(s_version);
    }
    static std::string Desc()
    {
        std::stringstream ss ;
        ss << "C4Version::Desc" << std::endl 
           << " Custom4_VERSION_MAJOR          : " << C4Version_xstr(Custom4_VERSION_MAJOR) << std::endl 
           << " Custom4_VERSION_MINOR          : " << C4Version_xstr(Custom4_VERSION_MINOR) << std::endl 
           << " Custom4_VERSION_PATCH          : " << C4Version_xstr(Custom4_VERSION_PATCH) << std::endl 
           << " Custom4_VERSION                : " << C4Version_xstr(Custom4_VERSION) << std::endl 
           << " Custom4_VERSION_NUMBER         : " << C4Version_xstr(Custom4_VERSION_NUMBER) << std::endl 
           << " C4Version::Version()           : " << C4Version::Version() << std::endl 
           << " C4Version::Number()            : " << C4Version::Number() << std::endl 
           << " C4Version::Int()               : " << C4Version::Int() << std::endl 
           << std::endl 
           ;


#if Custom4_VERSION_NUMBER >= 105
        ss  << " Custom4_VERSION_NUMBER >= 105 " << std::endl ; 
#elif Custom4_VERSION_NUMBER >= 104
        ss  << " Custom4_VERSION_NUMBER >= 104  ( and not >= 105 ) " << std::endl ; 
#else
        ss << " Custom4_VERSION_NUMBER didnt fit into those branches " << std::endl ; 
#endif
        ss << std::endl ; 

#if Custom4_VERSION_NUMBER > 105
        ss << " Custom4_VERSION_NUMBER > 105 " << std::endl ; 
#elif Custom4_VERSION_NUMBER > 104
        ss << " Custom4_VERSION_NUMBER > 104  ( and not > 105 )  " << std::endl ; 
#else
        ss << " Custom4_VERSION_NUMBER didnt fit into those branches " << std::endl ; 
#endif
 
        std::string str = ss.str(); 
        return str ; 
    }
};



