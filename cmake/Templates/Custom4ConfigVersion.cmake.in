#[=[
Custom4ConfigVersion.cmake
============================

Derived from cmake/Templates/Custom4ConfigVersion.cmake.in

This file is configured by Custom4 for use with CMake's find_package in
Config mode. It enables external projects to determine the version of 
Custom4 found. More importantly, it allows that command to automatically 
determine whether the found install is compatible with any VERSION that 
was supplied with find_package.

This file is configured by the Custom4 CMake system and SHOULD NOT BE EDITED

https://cmake.org/cmake/help/latest/command/find_package.html
https://cmake.org/cmake/help/latest/command/find_package.html#version-selection

The version file is loaded in a nested scope in which the 
below PACKAGE_FIND variables have been defined:


#]=]

# - Installed Version as set from CMake
set(PACKAGE_VERSION "@Custom4_VERSION@")

if(Custom4_VERBOSE)
message(STATUS "CMAKE_CURRENT_LIST_FILE        : ${CMAKE_CURRENT_LIST_FILE}        ")
message(STATUS "PACKAGE_FIND_NAME              : ${PACKAGE_FIND_NAME}              ")
message(STATUS "PACKAGE_FIND_VERSION           : ${PACKAGE_FIND_VERSION}           ")
message(STATUS "PACKAGE_FIND_VERSION_MAJOR     : ${PACKAGE_FIND_VERSION_MAJOR}     ")
message(STATUS "PACKAGE_FIND_VERSION_MINOR     : ${PACKAGE_FIND_VERSION_MINOR}     ")
message(STATUS "PACKAGE_FIND_VERSION_PATCH     : ${PACKAGE_FIND_VERSION_PATCH}     ")
message(STATUS "PACKAGE_FIND_VERSION_TWEAK     : ${PACKAGE_FIND_VERSION_TWEAK}     ")
message(STATUS "PACKAGE_FIND_VERSION_COUNT     : ${PACKAGE_FIND_VERSION_COUNT}     ")
message(STATUS "PACKAGE_FIND_VERSION_RANGE     : ${PACKAGE_FIND_VERSION_RANGE}     ")
message(STATUS "PACKAGE_FIND_VERSION_RANGE_MIN : ${PACKAGE_FIND_VERSION_RANGE_MIN} ")
message(STATUS "PACKAGE_FIND_VERSION_RANGE_MAX : ${PACKAGE_FIND_VERSION_RANGE_MAX} ")
message(STATUS "PACKAGE_FIND_VERSION_MIN       : ${PACKAGE_FIND_VERSION_MIN}       ")
message(STATUS "PACKAGE_FIND_VERSION_MIN_MAJOR : ${PACKAGE_FIND_VERSION_MIN_MAJOR} ")
message(STATUS "PACKAGE_FIND_VERSION_MIN_MINOR : ${PACKAGE_FIND_VERSION_MIN_MINOR} ")
message(STATUS "PACKAGE_FIND_VERSION_MIN_PATCH : ${PACKAGE_FIND_VERSION_MIN_PATCH} ")
message(STATUS "PACKAGE_FIND_VERSION_MIN_TWEAK : ${PACKAGE_FIND_VERSION_MIN_TWEAK} ")
message(STATUS "PACKAGE_FIND_VERSION_MIN_COUNT : ${PACKAGE_FIND_VERSION_MIN_COUNT} ")
message(STATUS "PACKAGE_FIND_VERSION_MAX       : ${PACKAGE_FIND_VERSION_MAX}       ")
message(STATUS "PACKAGE_FIND_VERSION_MAX_MAJOR : ${PACKAGE_FIND_VERSION_MAX_MAJOR} ")
message(STATUS "PACKAGE_FIND_VERSION_MAX_MAXOR : ${PACKAGE_FIND_VERSION_MAX_MAXOR} ")
message(STATUS "PACKAGE_FIND_VERSION_MAX_PATCH : ${PACKAGE_FIND_VERSION_MAX_PATCH} ")
message(STATUS "PACKAGE_FIND_VERSION_MAX_TWEAK : ${PACKAGE_FIND_VERSION_MAX_TWEAK} ")
message(STATUS "PACKAGE_FIND_VERSION_MAX_COUNT : ${PACKAGE_FIND_VERSION_MAX_COUNT} ")
message(STATUS "PACKAGE_FIND_VERSION_COMPLETE  : ${PACKAGE_FIND_VERSION_COMPLETE}  ")
endif()

 
# Check version compatibility 
if("${PACKAGE_VERSION}" VERSION_LESS "${PACKAGE_FIND_VERSION}")
  set(PACKAGE_VERSION_COMPATIBLE FALSE)
else()
  set(PACKAGE_VERSION_COMPATIBLE TRUE)
  if("${PACKAGE_VERSION}" VERSION_EQUAL "${PACKAGE_FIND_VERSION}")
    set(PACKAGE_VERSION_EXACT TRUE)
  endif()
endif()


if(Custom4_VERBOSE)
message(STATUS "CMAKE_CURRENT_LIST_FILE     : ${CMAKE_CURRENT_LIST_FILE}    ")
message(STATUS "PACKAGE_VERSION             : ${PACKAGE_VERSION}            ")
message(STATUS "PACKAGE_VERSION_EXACT       : ${PACKAGE_VERSION_EXACT}      ")
message(STATUS "PACKAGE_VERSION_COMPATIBLE  : ${PACKAGE_VERSION_COMPATIBLE} ")
message(STATUS "PACKAGE_VERSION_UNSUITABLE  : ${PACKAGE_VERSION_UNSUITABLE} ")
endif()





